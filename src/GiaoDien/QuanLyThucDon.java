/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GiaoDien;

import DAO.AccountDAO;
import DAO.DrinksDAO;
import DAO.InvoicesDAO;
import DAO.MenuDAO;
import DAO.OrdersDAO;
import DAO.TablesDAO;
import DTO.Tables;
import DTO.Account;
import DTO.Drinks;
import DTO.Menu;
import Utilities.DBUtility;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author huyparody
 */
public class QuanLyThucDon extends javax.swing.JFrame {

        /**
         * Creates new form QuanLyThucDon
         */
        int idTable = -1;
        DefaultComboBoxModel<Drinks> comboBoxModel;
        DefaultTableModel tableModelTables;
        DefaultTableModel tableModelDrinks;
        int totalPrice = 0;

        public QuanLyThucDon() {
                initComponents();
                txtDisplay.setText("Xin chao: " + AccountDAO.getInstance().GetAccount().getName());
                tableModelTables = new DefaultTableModel();
                tableModelTables.addColumn("STT");
                tableModelTables.addColumn("Tên bàn");
                tableModelTables.addColumn("Trạng thái");
                tableModelTables.addColumn("Ghi chú");
                tblTables.setModel(tableModelTables);
                displayTables();

                tableModelDrinks = new DefaultTableModel();
                tableModelDrinks.addColumn("STT");
                tableModelDrinks.addColumn("ID Order");
                tableModelDrinks.addColumn("Tên đồ uống");
                tableModelDrinks.addColumn("Giá");
                tableModelDrinks.addColumn("Số lượng");
                tableModelDrinks.addColumn("Thành tiền");
                tblOrder.setModel(tableModelDrinks);

                comboBoxModel = new DefaultComboBoxModel<>();
                Drinks mChon = new Drinks(-1, "---- Chọn đồ uống ----");
                comboBoxModel.addElement(mChon);
                cboDrinks.setModel(comboBoxModel);
                loadDrinks();
        }
        
        
        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupOrderMenu = new javax.swing.JPopupMenu();
        deleteItem = new javax.swing.JMenuItem();
        editQuantityItem = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTables = new javax.swing.JTable();
        cboDrinks = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        spnAmount = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnPay = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        btnHome = new javax.swing.JButton();
        txtDisplay = new javax.swing.JLabel();
        btnReceipt = new javax.swing.JButton();

        popupOrderMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popupOrderMenuMouseClicked(evt);
            }
        });

        deleteItem.setText("Xóa Món");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        popupOrderMenu.add(deleteItem);

        editQuantityItem.setText("Chỉnh sửa số lượng");
        editQuantityItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editQuantityItemActionPerformed(evt);
            }
        });
        popupOrderMenu.add(editQuantityItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý bán hàng");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/icons8-restaurant-menu-50.png"))); // NOI18N
        jLabel1.setText("Quản lý bán hàng");

        tblTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTables);

        cboDrinks.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboDrinks.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDrinksActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Plus_50px.png"))); // NOI18N
        btnAdd.setText("Thêm đồ uống");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        spnAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spnAmount.setValue(1);

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblOrder.setComponentPopupMenu(popupOrderMenu);
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrder);

        btnPay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Cash in Hand_50px.png"))); // NOI18N
        btnPay.setText("Thanh toán");
        btnPay.setEnabled(false);
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Tổng tiền");

        txtTotalPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotalPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalPrice.setText("0");
        txtTotalPrice.setEnabled(false);

        btnHome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GiaoDien/Icon/Go Back_50px.png"))); // NOI18N
        btnHome.setText("Quay lại");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        txtDisplay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDisplay.setText("jLabel3");

        btnReceipt.setText("In Hóa Đơn");
        btnReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboDrinks, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTotalPrice)
                            .addComponent(btnPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReceipt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboDrinks, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
            // TODO add your handling code here:
            int invoiceId = InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
            Drinks drinks = (Drinks) cboDrinks.getSelectedItem();
            
            // Kiểm tra nếu chưa chọn loại đồ uống (mặc định là "Chọn đồ uống")
            if (drinks == null || "---- Chọn đồ uống ----".equals(drinks.toString())) {
                JOptionPane.showMessageDialog(this, "Bạn chưa chọn đồ uống", "Lỗi", JOptionPane.WARNING_MESSAGE);
                return; // Dừng thực thi nếu chưa chọn đồ uống
            }

            if (invoiceId == -1) {
                    InvoicesDAO.getInstance().Insert(idTable, AccountDAO.getInstance().GetAccount().getId());
                    OrdersDAO.getInstance().Insert(drinks.getId(), InvoicesDAO.getInstance().GetMaxIdInvoice(), Integer.parseInt(spnAmount.getValue().toString()));
            } else {
                    OrdersDAO.getInstance().Insert(drinks.getId(), invoiceId, Integer.parseInt(spnAmount.getValue().toString()));
            }
            Connection con = DBUtility.openConnection();
            PreparedStatement pstmt;
            try {
                    pstmt = con.prepareStatement("update tables set status=1 where ID=?");
                    pstmt.setInt(1, idTable);
                    pstmt.executeUpdate();
                    displayTables();
                    displayTableDrinks();
                    btnPay.setEnabled(true);
                    cboDrinks.setSelectedIndex(0);
                    
                     // Hiển thị thông báo thành công
                    JOptionPane.showMessageDialog(this, "Thêm thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    
            } catch (SQLException ex) {
                    Logger.getLogger(QuanLyThucDon.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnAddActionPerformed

    private void cboDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDrinksActionPerformed
            // TODO add your handling code here:

    }//GEN-LAST:event_cboDrinksActionPerformed

    private void tblTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTablesMouseClicked
            // TODO add your handling code here:
            int row = tblTables.getSelectedRow();
            btnAdd.setEnabled(true);
            if ((tblTables.getValueAt(row, 2) + "").equals("Đã đặt")) {
                    btnPay.setEnabled(true);
            } else {
                    btnPay.setEnabled(false);
            }
            List<Tables> listTable = TablesDAO.getInstance().LoadListTables();
            idTable = listTable.get(row).getTableId();
            displayTableDrinks();
    }//GEN-LAST:event_tblTablesMouseClicked

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
            
            dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnHomeActionPerformed

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        // Kiểm tra xem cú nhấp chuột có phải là chuột phải không
        if (evt.isPopupTrigger() && tblOrder.getSelectedRow() != -1) {
            popupOrderMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblOrderMouseClicked

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa món này không?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Xác định cột chứa `orderId` chính xác
                int orderId = (int) tableModelDrinks.getValueAt(selectedRow, 1);

                try (Connection con = DBUtility.openConnection();
                     PreparedStatement pstmt = con.prepareStatement("DELETE FROM orders WHERE ID = ?")) {
                    pstmt.setInt(1, orderId);
                    int affectedRows = pstmt.executeUpdate();

                    if (affectedRows > 0) {
                        tableModelDrinks.removeRow(selectedRow); // Xóa trong bảng
                        JOptionPane.showMessageDialog(this, "Món đã được xóa!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                        displayTableDrinks(); // Cập nhật bảng
                    } else {
                        JOptionPane.showMessageDialog(this, "Không tìm thấy món để xóa trong cơ sở dữ liệu.", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi xóa đồ uống khỏi cơ sở dữ liệu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hàng để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteItemActionPerformed

    private void editQuantityItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editQuantityItemActionPerformed
        int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow != -1) {
            // Lấy ID của món từ cột chứa ID của đơn hàng
            int orderId = (int) tableModelDrinks.getValueAt(selectedRow, 1); // Giả sử cột 1 chứa ID của orders

            // Lấy số lượng hiện tại từ bảng và yêu cầu người dùng nhập số lượng mới
            int currentQuantity = (int) tableModelDrinks.getValueAt(selectedRow, 4); // Giả sử cột 4 chứa số lượng
            JSpinner spinner = new JSpinner(new SpinnerNumberModel(currentQuantity, 1, 100, 1));
            int result = JOptionPane.showConfirmDialog(this, spinner, "Nhập số lượng mới", JOptionPane.OK_CANCEL_OPTION);

            if (result == JOptionPane.OK_OPTION) {
                int newQuantity = (int) spinner.getValue();

                try (Connection con = DBUtility.openConnection();
                     PreparedStatement pstmt = con.prepareStatement("UPDATE orders SET count = ? WHERE ID = ?")) {
                    pstmt.setInt(1, newQuantity);
                    pstmt.setInt(2, orderId);
                    int affectedRows = pstmt.executeUpdate();

                    if (affectedRows > 0) {
                        tableModelDrinks.setValueAt(newQuantity, selectedRow, 4); // Cập nhật số lượng trong bảng hiển thị
                        int price = (int) tableModelDrinks.getValueAt(selectedRow, 3); // Cột giá
                        int total = newQuantity * price;
                        tableModelDrinks.setValueAt(total, selectedRow, 5); // Cập nhật thành tiền
                        JOptionPane.showMessageDialog(this, "Số lượng đã được cập nhật!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Không tìm thấy món để cập nhật trong cơ sở dữ liệu.", "Thông báo", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi cập nhật số lượng đồ uống trong cơ sở dữ liệu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hàng để cập nhật số lượng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_editQuantityItemActionPerformed

    private void popupOrderMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popupOrderMenuMouseClicked
            if (evt.isPopupTrigger()) { // Kiểm tra nếu nhấp chuột phải
            int row = tblOrder.rowAtPoint(evt.getPoint());
            if (row >= 0) {
                tblOrder.setRowSelectionInterval(row, row); // Chọn hàng
            } else {
                tblOrder.clearSelection(); // Bỏ chọn
            }
            popupOrderMenu.show(evt.getComponent(), evt.getX(), evt.getY()); // Hiển thị popup
        }
    }//GEN-LAST:event_popupOrderMenuMouseClicked

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
            
            try {
            // Tính tổng tiền cho bàn hiện tại
            int totalPrice = 0;
            List<Menu> listMenu = MenuDAO.getInstance().GetListMenuByTableId(idTable);
            for (Menu menu : listMenu) {
                totalPrice += menu.getTotalPrice();
            }
         

            // Cập nhật hóa đơn với tổng tiền đã tính
            int invoiceId = InvoicesDAO.getInstance().GetUncheckInvoiceByTableId(idTable);
            InvoicesDAO.getInstance().Update(invoiceId, totalPrice);
            
            // Lưu hóa đơn vào file .txt
            saveInvoiceToFile(invoiceId, totalPrice, listMenu);

            // Đặt trạng thái bàn là "0" (có thể là trạng thái trống) sau khi thanh toán
            Connection con = DBUtility.openConnection();
            PreparedStatement pstmt = con.prepareStatement("update tables set status=0 where ID=?");
            pstmt.setInt(1, idTable);
            pstmt.executeUpdate();

            // Cập nhật giao diện hiển thị bàn và đồ uống
            displayTables();
            displayTableDrinks();

            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Thanh toán thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (SQLException ex) {
            Logger.getLogger(QuanLyThucDon.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi thanh toán.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPayActionPerformed

        private void saveInvoiceToFile(int invoiceId, int totalPrice, List<Menu> listMenu) {
            // Lấy tên bàn từ ID
            String tableName = TablesDAO.getInstance().getTableNameById(idTable);

            // Xác định tên file để lưu hóa đơn với timestamp
            String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH_mm"));
            String fileName = "receipt_" + dateTime + ".txt"; 

            try (FileWriter writer = new FileWriter(fileName)) {
                writer.write("------- HÓA ĐƠN THANH TOÁN-------\n");
                writer.write("Bàn: " + tableName + "\n");
                writer.write("Ngày: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "\n\n");
                writer.write(String.format("%-5s %-20s %-10s %-10s %-10s\n", "STT", "Tên đồ uống", "Giá", "Số lượng", "Thành tiền"));

                // Duyệt qua từng hàng trong bảng để lấy dữ liệu đồ uống
                for (int i = 0; i < tableModelDrinks.getRowCount(); i++) {
                    int index = (int) tableModelDrinks.getValueAt(i, 0);           // STT
                    String drinkName = (String) tableModelDrinks.getValueAt(i, 2); // Tên đồ uống
                    int price = (int) tableModelDrinks.getValueAt(i, 3);           // Giá
                    int quantity = (int) tableModelDrinks.getValueAt(i, 4);        // Số lượng
                    int total = (int) tableModelDrinks.getValueAt(i, 5);           // Thành tiền

                    // Ghi dữ liệu của mỗi hàng vào file
                    writer.write(String.format("%-5d %-20s %-10d %-10d %-10d\n", index, drinkName, price, quantity, total));
                }

                // Ghi tổng tiền vào cuối hóa đơn
                writer.write("\nTổng tiền: " + totalPrice + " VND\n");
                writer.write("-----------------------\n");

                // Thông báo lưu file thành công
                JOptionPane.showMessageDialog(this, "Hóa đơn đã được in vào file: " + fileName, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi ghi hóa đơn vào file.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }

        
    private void btnReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceiptActionPerformed
        // TODO add your handling code here:
        // Lấy tên bàn từ ID
            String tableName = TablesDAO.getInstance().getTableNameById(idTable);

            // Xác định tên file để lưu hóa đơn
            String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH_mm"));
            String fileName = "receipt_" + dateTime + ".txt"; // Tạo tên file với timestamp để tránh trùng

            try (FileWriter writer = new FileWriter(fileName)) {
                writer.write("------- HÓA ĐƠN KIỂM TRA -------\n");
                writer.write("Bàn: " + tableName + "\n");
                writer.write("Ngày: " + java.time.LocalDateTime.now() + "\n\n");
                writer.write(String.format("%-5s %-20s %-10s %-10s %-10s\n", "STT", "Tên đồ uống", "Giá", "Số lượng", "Thành tiền"));

                // Lấy số lượng hàng trong bảng
                int rowCount = tableModelDrinks.getRowCount();
                int totalAmount = 0;

                // Duyệt qua từng hàng trong bảng để lấy dữ liệu
                for (int i = 0; i < rowCount; i++) {
                    int index = (int) tableModelDrinks.getValueAt(i, 0);           // STT
                    String drinkName = (String) tableModelDrinks.getValueAt(i, 2); // Tên đồ uống
                    int price = (int) tableModelDrinks.getValueAt(i, 3);           // Giá
                    int quantity = (int) tableModelDrinks.getValueAt(i, 4);        // Số lượng
                    int total = (int) tableModelDrinks.getValueAt(i, 5);           // Thành tiền
                    totalAmount += total;

                    // Ghi dữ liệu của mỗi hàng vào file
                    writer.write(String.format("%-5d %-20s %-10d %-10d %-10d\n", index, drinkName, price, quantity, total));
                }

                // Ghi tổng tiền vào cuối hóa đơn
                writer.write("\nTổng tiền: " + totalAmount + " VND\n");
                writer.write("-----------------------\n");

                // Thông báo lưu file thành công
                JOptionPane.showMessageDialog(this, "Hóa đơn đã được in vào file: " + fileName, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi ghi hóa đơn vào file.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnReceiptActionPerformed
    
        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Windows".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(QuanLyThucDon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                new QuanLyThucDon().setVisible(true);
                        }
                });
        }
        
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnReceipt;
    private javax.swing.JComboBox cboDrinks;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JMenuItem editQuantityItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu popupOrderMenu;
    private javax.swing.JSpinner spnAmount;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblTables;
    private javax.swing.JLabel txtDisplay;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

        private void displayTables() {
                tableModelTables.setRowCount(0);
                List<Tables> listTable = TablesDAO.getInstance().LoadListTables();
                for (int i = 0; i < listTable.size(); i++) {
                        Tables tables = listTable.get(i);
                        Object[] dt = {i + 1, tables.getTableName(), tables.getTableStatus(), tables.getTableNote()};
                        tableModelTables.addRow(dt);
                }
        }
        


        private void displayTableDrinks() {
                int totalPrice = 0;
                // Reset totalPrice trước khi tính lại
                tableModelDrinks.setRowCount(0);

                // Lấy danh sách các món của bàn hiện tại từ cơ sở dữ liệu
                List<Menu> listMenu = MenuDAO.getInstance().GetListMenuByTableId(idTable);

                // Duyệt qua danh sách món và tính tổng tiền
                for (int i = 0; i < listMenu.size(); i++) {
                    Menu menu = listMenu.get(i);
                    Object[] dt = {i + 1, menu.getID(), menu.getDrinkName(), menu.getPrice(), menu.getCount(), menu.getTotalPrice()};
                    totalPrice += menu.getTotalPrice();  // Cộng dồn tổng tiền của món
                    tableModelDrinks.addRow(dt);  // Thêm dòng vào bảng
                }

                // Hiển thị tổng tiền cho bàn hiện tại
                txtTotalPrice.setText(String.valueOf(totalPrice));

        }

        private void loadDrinks() {
                List<Drinks> listDrink = DrinksDAO.getInstance().GetListDrink();
                for (Drinks drinks : listDrink) {
                        comboBoxModel.addElement(drinks);
                }
        }
}
